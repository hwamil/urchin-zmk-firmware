/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "keymap_italian.h"

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    ko: ko {
        compatible = "zmk,behavior-tap-dance";
        label = "KO";
        #binding-cells = <0>;
        bindings = <&ko_win>, <&ko_mac>;

        tapping-term-ms = <250>;
    };

    hrmLeft: hrmLeft {
        compatible = "zmk,behavior-hold-tap";
        label = "HRMLEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59>;
    };

    hrmRight: hrmRight {
        compatible = "zmk,behavior-hold-tap";
        label = "HRMRIGHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
    };

    sticky: sticky {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY";
        bindings = <&kp>;
        #binding-cells = <1>;
        release-after-ms = <2000>;
        quick-release;
    };

    en: en {
        compatible = "zmk,behavior-tap-dance";
        label = "EN";
        #binding-cells = <0>;
        bindings = <&en_win>, <&en_mac>;

        tapping-term-ms = <250>;
    };

    undo: undo {
        compatible = "zmk,behavior-tap-dance";
        label = "UNDO";
        #binding-cells = <0>;
        bindings = <&kp LC(Z)>, <&kp LG(Z)>;

        tapping-term-ms = <300>;
    };

    cut: cut {
        compatible = "zmk,behavior-tap-dance";
        label = "cut";
        #binding-cells = <0>;
        bindings = <&kp LC(X)>, <&kp LG(X)>;

        tapping-term-ms = <300>;
    };

    copy: copy {
        compatible = "zmk,behavior-tap-dance";
        label = "copy";
        #binding-cells = <0>;
        bindings = <&kp LC(C)>, <&kp LG(C)>;

        tapping-term-ms = <300>;
    };

    paste: paste {
        compatible = "zmk,behavior-tap-dance";
        label = "paste";
        #binding-cells = <0>;
        bindings = <&kp LC(V)>, <&kp LG(V)>;

        tapping-term-ms = <300>;
    };

    redo: redo {
        compatible = "zmk,behavior-tap-dance";
        label = "redo";
        #binding-cells = <0>;
        bindings = <&kp LS(LC(Z))>, <&kp LS(LG(Z))>;

        tapping-term-ms = <300>;
    };

    customlt: customlt {
        compatible = "zmk,behavior-hold-tap";
        label = "CUSTOMLT";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        quick-tap-ms = <200>;
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };

        paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N9 &kp N0>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "PAREN";
        };

        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKET";
        };

        ko_win: ko_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp RIGHT_ALT>;
            label = "KO_WIN";
        };

        en_win: en_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp RIGHT_ALT>;
            label = "en_win";
        };

        ko_mac: ko_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 1>,
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>;

            label = "KO_MAC";
        };

        en_mac: en_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 0>,
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>;

            label = "EN_MAC";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT_BRACKET &kp RIGHT_BRACKET>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "BRACES";
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
            layers = <0 1>;
            timeout-ms = <75>;
        };

        enter {
            bindings = <&kp RETURN>;
            key-positions = <22 23>;
            timeout-ms = <75>;
        };

        wsleft {
            bindings = <&kp LA(LC(H))>;
            key-positions = <30 31>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        wsright {
            bindings = <&kp LA(LC(L))>;
            key-positions = <34 33>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        bandforth {
            bindings = <&kp LA(S)>;
            key-positions = <40 41>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        wincap {
            bindings = <&kp LS(LA(LC(S)))>;
            key-positions = <43 42>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        clipboard {
            bindings = <&kp LS(LA(LC(LG(C))))>;
            key-positions = <17 16>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        math {
            bindings = <&kp LA(LS(LC(M)))>;
            key-positions = <21 22>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        searchcommands {
            bindings = <&kp LS(LA(LC(LG(S))))>;
            key-positions = <47 48>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        game {
            bindings = <&tog 2>;
            key-positions = <50 49>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        paren {
            bindings = <&paren>;
            key-positions = <17 21>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        brackets {
            bindings = <&bracket>;
            key-positions = <16 22>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        braces {
            bindings = <&braces>;
            key-positions = <15 23>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        ko {
            bindings = <&ko>;
            key-positions = <48 49>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <31 33>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        en {
            bindings = <&en>;
            key-positions = <41 42>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <14 15>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };
     };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&kp Q  &kp W  &kp F  &kp P    &kp B             &kp J      &kp L    &kp U      &kp Y    &kp SEMICOLON
&kp A  &kp R  &kp S  &kp T    &kp G             &kp M      &kp N    &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D    &kp V             &kp K      &kp H    &kp COMMA  &kp DOT  &kp SLASH
                     &mo EXT  &qt LSHIFT SPACE  &kp SPACE  &sl SYM
            >;
        };

        // Numbers and high frequency symbols

        sym_layer {
            label = "Sym.";
            bindings = <
&kp N1        &kp N2       &kp N3       &kp N4       &kp N5       &kp N6      &kp N7       &kp N8        &kp N9        &kp N0
&kp IT_LESS   &kp IT_USD   &kp IT_LPAR  &kp IT_LBRC  &kp IT_LBKT  &kp IT_EQL  &kp IT_QUES  &kp IT_SQUOT  &kp IT_MINUS  &kp IT_AST
&kp IT_GREAT  &kp IT_PERC  &kp IT_RPAR  &kp IT_RBRC  &kp IT_RBKT  &kp IT_AT   &kp IT_EXCL  &kp IT_DQUOT  &kp IT_PLUS   &kp IT_FSLH
                                        &mo FNC      &mo SYM2     &trans      &trans
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            label = "Mods";
            bindings = <
&kp ESC       &kp C_PREV    &kp C_PP          &kp C_NEXT      &kp C_PAUSE  &kp PG_UP     &kp HOME  &kp UP    &kp END    &kp CAPS
&sk LEFT_GUI  &sk LEFT_ALT  &sk LEFT_CONTROL  &sk LEFT_SHIFT  &kp RALT     &kp PG_DN     &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL
&kp LC(Z)     &kp LC(X)     &kp LC(C)         &kp TAB         &kp LC(V)    &kp LC(BSPC)  &kp BSPC  &trans    &trans     &trans
                                              &trans          &kp LCTRL    &kp ENTER     &mo FNC
            >;
        };

        // Function keys with modifiers

        fnc_layer {
            label = "FRow";
            bindings = <
&kp F1    &kp F2    &kp F3      &kp F4     &kp F5    &kp F6   &kp F7   &kp F8           &kp F9  &kp F10
&sk LALT  &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT  &kp F11  &kp F12  &kp PRINTSCREEN  &trans  &trans
&none     &none     &none       &none      &none     &none    &none    &none            &none   &none
                                &none      &none     &none    &none
            >;
        };

        // Low frequency symbols.

        symbols_2_layer {
            label = "Sym.2";
            bindings = <
&kp IT_CARET  &kp IT_UNDER  &kp IT_PND   &kp IT_EUR   &kp IT_HASH  &none  &none  &none  &none  &none
&kp IT_BKTK   &kp IT_TILDE  &kp IT_BSLH  &kp IT_PIPE  &kp IT_AND   &none  &none  &none  &none  &none
&none         &none         &kp IT_SECT  &kp IT_CCED  &kp IT_DEG   &none  &none  &none  &none  &none
                                         &none        &none        &none  &none
            >;
        };

        // Used to type regional accents.

        accent_layer {
            label = "Accent";
            bindings = <
&none        &none        &none        &kp IT_CEGR  &none        &none  &none  &none  &none  &none
&kp IT_AGRV  &kp IT_IGRV  &kp IT_OGRV  &kp IT_EGRV  &kp IT_EACU  &none  &none  &none  &none  &none
&none        &none        &none        &kp IT_UGRV  &none        &none  &none  &none  &none  &none
                                       &none        &none        &none  &none
            >;
        };

        // Used to change the keyboard's settings.

        settings_layer {
            label = "Sett.";
            bindings = <
&bootloader     &none  &none  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&none           &none  &none  &none       &bt BT_SEL 1  &bt BT_SEL 4  &none  &none     &none  &none
&studio_unlock  &none  &none  &none       &bt BT_SEL 2  &bt BT_SEL 5  &none  &none     &none  &studio_unlock
                              &none       &none         &none         &none
            >;
        };
    };
};
