/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "keymap_italian.h"

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    ko: ko {
        compatible = "zmk,behavior-tap-dance";
        label = "KO";
        #binding-cells = <0>;
        bindings = <&ko_win>, <&ko_mac>;

        tapping-term-ms = <250>;
    };

    hrmLeft: hrmLeft {
        compatible = "zmk,behavior-hold-tap";
        label = "HRMLEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59 5 9 5 6 7 15 16 17 25 26 27 8 9 18 19 28 29>;
    };

    hrmRight: hrmRight {
        compatible = "zmk,behavior-hold-tap";
        label = "HRMRIGHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
    };

    sticky: sticky {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY";
        bindings = <&kp>;
        #binding-cells = <1>;
        release-after-ms = <2000>;
        quick-release;
    };

    en: en {
        compatible = "zmk,behavior-tap-dance";
        label = "EN";
        #binding-cells = <0>;
        bindings = <&en_win>, <&en_mac>;

        tapping-term-ms = <250>;
    };

    undo: undo {
        compatible = "zmk,behavior-tap-dance";
        label = "UNDO";
        #binding-cells = <0>;
        bindings = <&kp LC(Z)>, <&kp LG(Z)>;

        tapping-term-ms = <300>;
    };

    cut: cut {
        compatible = "zmk,behavior-tap-dance";
        label = "cut";
        #binding-cells = <0>;
        bindings = <&kp LC(X)>, <&kp LG(X)>;

        tapping-term-ms = <300>;
    };

    copy: copy {
        compatible = "zmk,behavior-tap-dance";
        label = "copy";
        #binding-cells = <0>;
        bindings = <&kp LC(C)>, <&kp LG(C)>;

        tapping-term-ms = <300>;
    };

    paste: paste {
        compatible = "zmk,behavior-tap-dance";
        label = "paste";
        #binding-cells = <0>;
        bindings = <&kp LC(V)>, <&kp LG(V)>;

        tapping-term-ms = <300>;
    };

    redo: redo {
        compatible = "zmk,behavior-tap-dance";
        label = "redo";
        #binding-cells = <0>;
        bindings = <&kp LS(LC(Z))>, <&kp LS(LG(Z))>;

        tapping-term-ms = <300>;
    };

    customlt: customlt {
        compatible = "zmk,behavior-hold-tap";
        label = "CUSTOMLT";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        quick-tap-ms = <200>;
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };

        paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N9 &kp N0>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "PAREN";
        };

        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKET";
        };

        ko_win: ko_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp RIGHT_ALT>;
            label = "KO_WIN";
        };

        en_win: en_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp RIGHT_ALT>;
            label = "en_win";
        };

        ko_mac: ko_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 1>,
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>;

            label = "KO_MAC";
        };

        en_mac: en_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 0>,
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>;

            label = "EN_MAC";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT_BRACKET &kp RIGHT_BRACKET>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "BRACES";
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0 1>;
            timeout-ms = <75>;
        };

        enter {
            bindings = <&kp RETURN>;
            key-positions = <7 8>;
            timeout-ms = <75>;
        };

        wsleft {
            bindings = <&kp LA(LC(H))>;
            key-positions = <13 14>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
            layers = <0 1>;
        };

        wsright {
            bindings = <&kp LA(LC(L))>;
            key-positions = <34 15 16>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
            layers = <0 1>;
        };

        bandforth {
            bindings = <&kp LA(S)>;
            key-positions = <40 41 11 12>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
            layers = <0 1>;
        };

        wincap {
            bindings = <&kp LS(LA(LC(S)))>;
            key-positions = <43 42 6 7>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        clipboard {
            bindings = <&kp LS(LA(LC(LG(C))))>;
            key-positions = <2 3>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
            layers = <0 1>;
        };

        math {
            bindings = <&kp LA(LS(LC(M)))>;
            key-positions = <26 27>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        searchcommands {
            bindings = <&kp LS(LA(LC(LG(S))))>;
            key-positions = <47 48 10 11 12 13>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        game {
            bindings = <&tog 2>;
            key-positions = <50 49 28 29>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        paren {
            bindings = <&paren>;
            key-positions = <3 6>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        brackets {
            bindings = <&bracket>;
            key-positions = <2 7>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        braces {
            bindings = <&braces>;
            key-positions = <1 8>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        ko {
            bindings = <&ko>;
            key-positions = <48 49 27 28>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        en {
            bindings = <&en>;
            key-positions = <41 42 21 22>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <0 1>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <14 15>;
        };

        game_tab {
            bindings = <&kp TAB>;
            key-positions = <3 2>;
            layers = <2>;
        };

        game_1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <3 4>;
        };

        game_2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <13 14>;
            layers = <2>;
        };

        game_3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <23 24>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&kp Q              &kp W            &kp F             &kp P              &kp B              &kp J                  &kp L                   &kp U              &kp Y             &kp SEMICOLON
&hrmLeft LGUI A    &hrmLeft LALT R  &hrmLeft LCTRL S  &hrmLeft LSHIFT T  &kp G              &kp M                  &hrmRight LEFT_SHIFT N  &hrmRight LCTRL E  &hrmRight LALT I  &hrmRight LGUI O
&hrmLeft LSHIFT Z  &kp X            &kp C             &kp D              &kp V              &kp K                  &kp H                   &kp COMMA          &kp DOT           &hrmRight LSHIFT SLASH
                                                      &kp TAB            &customlt 4 SPACE  &customlt 4 BACKSPACE  &sl 0
            >;
        };

        qwerty {
            bindings = <
&trans  &trans           &kp E             &kp R              &kp T   &kp Y   &kp U               &kp I              &kp O             &kp P
&trans  &hrmLeft LALT S  &hrmLeft LCTRL D  &hrmLeft LSHIFT F  &trans  &kp H   &hrmRight LSHIFT J  &hrmRight LCTRL K  &hrmRight LALT L  &hrmRight LGUI APOS
&trans  &trans           &trans            &kp V              &kp B   &kp N   &kp M               &trans             &trans            &trans
                                           &trans             &trans  &trans  &trans
            >;
        };

        game {
            bindings = <
&kp Q   &kp W  &kp E  &kp R     &kp T      &kp Y   &kp U   &kp I      &kp O    &kp P
&kp A   &kp S  &kp D  &kp F     &kp G      &kp H   &kp J   &kp K      &kp L    &kp APOS
&trans  &kp X  &kp C  &kp V     &kp B      &kp N   &kp M   &kp COMMA  &kp DOT  &trans
                      &kp LALT  &kp SPACE  &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans        &trans        &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans
&sticky LGUI  &sticky LALT  &sticky LCTRL  &sticky LSHFT  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans         &trans         &trans  &trans  &trans  &trans  &trans  &trans
                                           &trans         &trans  &trans  &trans
            >;
        };

        settings {
            label = "Sett.";
            bindings = <
&bootloader     &none  &none  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&none           &none  &none  &none       &bt BT_SEL 1  &bt BT_SEL 4  &none  &none     &none  &none
&studio_unlock  &none  &none  &none       &bt BT_SEL 2  &bt BT_SEL 5  &none  &none     &none  &studio_unlock
                              &none       &none         &none         &none
            >;
        };
    };
};
